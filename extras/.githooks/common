#!/bin/bash

# This file should be sourced, not executed directly.

root_dir="$(git rev-parse --show-toplevel)"
dockerfiles="${root_dir}/extras/docker/Dockerfile"

function dockertest() {
  dist="$1"; shift
  versions="$1"; shift
  fversion="$1"; shift
  targets="$1"; shift
  IFS=" " read -r -a extra_args <<< "${1:-}"

  for version in $versions; do
    image="${dist}-${version}"
    for target in $targets; do
      echo
      echo "Testing ${image}:${target} (factorio ${fversion})"
      echo
      docker build --build-arg "${dist}_version=${version}" \
                   --build-arg "factorio_version=${fversion}" \
                   --target "${target}" \
                   --tag "${image}-finit:${target}" - < "${dockerfiles}.${dist}" || return 1
      options=(-v "${root_dir}:/opt/factorio-init" "${image}-finit:${target}" "${extra_args[@]}" extras/test)
      docker run -t --rm "${options[@]}" || return 1
    done
  done
}

function run_shellchecks() {
  docker run --rm -v "${root_dir}:/mnt" koalaman/shellcheck:stable extras/.githooks/* &&
  docker run --rm -v "${root_dir}:/mnt" koalaman/shellcheck:stable factorio
}

function run_localtests() {
  "${root_dir}/extras/test/libs/bats-core/bin/bats" "${root_dir}/extras/test" || exit 1
}

function run_dockertests() {
  factorio_version="1.1.61"
  targets="with-test-resources sans-test-resources"

  dockertest ubuntu latest "${factorio_version}" "${targets}" "--jobs 10" &&
  dockertest "ubuntu" "latest" "${factorio_version}" "with-pre-installed-game" #TODO make pre-installed game tests run in parallel

  #dockertest "ubuntu" "20.04 18.04" "${factorio_version}" "${targets}" "--jobs 10" &&
  #dockertest "ubuntu" "20.04 18.04" "${factorio_version}" "with-pre-installed-game" && #TODO make pre-installed game tests run in parallel
  #dockertest "centos" "centos8" "${factorio_version}" "with-pre-installed-game ${targets}" || exit 1
  #dockertest "centos" "centos7" "${factorio_version}" "with-pre-installed-game-glibc with-glibc-sidebyside" || exit 1
}
