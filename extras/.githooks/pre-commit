#!/bin/bash

set -o pipefail
set -u

# remember how big the stash is before we try to stash
stash_size="$(git stash list |wc -l)"
git stash push --keep-index --include-untracked --message "pre-commit-hook-$(date +%s)" || exit 1

# try to clean up before we quit from now on
function __clean(){
    if [ "$stash_size" -lt "$(git stash list |wc -l)" ]; then
        # we added stuff earlier, let us restore it now
        git stash pop || exit 1
    fi
    return 0
}
trap __clean SIGINT SIGTERM ERR EXIT

# find out where this repo is situated
root_dir="$(git rev-parse --show-toplevel)"
dockerfiles="${root_dir}/extras/docker/Dockerfile"

# run shellcheck
docker run --rm -v "${root_dir}:/mnt" koalaman/shellcheck:stable extras/.githooks/pre-commit &&
docker run --rm -v "${root_dir}:/mnt" koalaman/shellcheck:stable factorio || exit 1

# run local tests
"${root_dir}/extras/test/libs/bats-core/bin/bats" "${root_dir}/extras/test" || exit 1

# run dockerized tests
function dockertest(){
    dist="$1"; shift
    versions="$1"; shift
    fversion="$1"; shift
    targets="$1"; shift
    IFS=" " read -r -a extra_args <<< "${1:-}"

    for version in $versions; do
        image="${dist}-${version}"
        for target in $targets; do
            echo
            echo "Testing ${image}:${target} (factorio ${fversion})"
            echo
            docker build --build-arg "${dist}_version=${version}" \
                         --build-arg "factorio_version=${fversion}" \
                         --target "${target}" \
                         --tag "${image}:${target}" - < "${dockerfiles}.${dist}" || return 1
            options=(-v "${root_dir}:/opt/factorio-init" "${image}:${target}" "${extra_args[@]}" extras/test)
            docker run -t --rm "${options[@]}" || return 1
        done
    done
}

factorio_version="1.1.30"
targets="with-test-resources sans-test-resources"

# TODO:	Break the running of tests out into a separate script to facilitate:
#		- only running selective tests/linting pre-commit, for sanity
#		- running all/some tests from commandline (to avoid stashing/doing git specific stuff)
#		- running all tests before pushing (ie what is happening now on every pre-commit)
dockertest "ubuntu" "20.04 18.04" "${factorio_version}" "${targets}" "--jobs 10" &&
dockertest "ubuntu" "20.04 18.04" "${factorio_version}" "with-pre-installed-game" && #TODO make pre-installed game tests run in parallel
dockertest "centos" "centos8" "${factorio_version}" "with-pre-installed-game ${targets}" || exit 1
dockertest "centos" "centos7" "${factorio_version}" "with-pre-installed-game-glibc with-glibc-sidebyside" || exit 1

__clean || exit 1
